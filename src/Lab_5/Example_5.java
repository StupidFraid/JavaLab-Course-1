package Lab_5;

import java.util.Scanner;

public class Example_5 {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        System.out.println("Воспользуемся методом, которому присваивается целочисленное значение.");
        System.out.println("Введите целочисленное значение в консоль: ");
        int inInt = in.nextInt();
        Example_5_SuppClass someClass = new Example_5_SuppClass();
        System.out.println("Создали объект \"someClass\", теперь присвоем ему значение c помощью сеттера");
        someClass.setClosedInt(inInt);
        System.out.println("Передали объекту, значение " + inInt + " получим теперь его: ");
        System.out.println(someClass.getClosedInt());
        System.out.println("Вызовем сеттер, но не будем присваивать ему ни какого значения, посмотрим что выйдет:");
        someClass.setClosedInt();
        System.out.println("Посмотрим что получили: " + someClass.getClosedInt());
        System.out.println("");
    }


}


//        Напишите программу с классом, у которого есть закрытое целочисленное
//        поле. Значение полю присваивается с помощью открытого метода. Методу
//        аргументом может передаваться целое число, а также метод может вызываться
//        без аргументов. Если методы вызывается без аргументов, то поле получает
//        нулевое значение. Если метод вызывается с целочисленным аргументом, то
//        это значение присваивается полю. Однако если переданное аргументом
//        методу значение превышает 100, то значением полю присваивается число 100.
//        Предусмотрите в классе конструктор, который работает по тому же принципу
//        что и метод для присваивания значения полю. Также в классе должен быть
//        метод, позволяющий проверить значение поля.